#
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: Huawei Inc.
#
#
enable.web.security=true
enable.role.protection=true
# set authorization server endpoint
authorization.server.endpoint=
# set authorization client id for api
authorization.api.client.id=
# set authorization client secret for api
authorization.api.client.secret=
# set authorization client id for swagger-ui
authorization.swagger.ui.client.id=
authorization.token.type=
oauth.protected.api.client.id=
oauth.protected.api.client.secret=
oauth.authorization.url=
oauth.token.url=
# spring security oauth2 config when using token type JWT
spring.security.oauth2.resourceserver.jwt.issuer-uri=${authorization.server.endpoint}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${authorization.server.endpoint}/oauth/v2/keys
# spring security oauth2 config when using token type OpaqueToken
spring.security.oauth2.resourceserver.opaquetoken.introspection-uri=${authorization.server.endpoint}/oauth/v2/introspect
spring.security.oauth2.resourceserver.opaquetoken.client-id=${authorization.api.client.id}
spring.security.oauth2.resourceserver.opaquetoken.client-secret=${authorization.api.client.secret}
# springdoc openapi security oauth2 config
springdoc.show-login-endpoint=true
springdoc.swagger-ui.oauth.use-pkce-with-authorization-code-grant=true
springdoc.swagger-ui.oauth.clientId=${authorization.swagger.ui.client.id}
# spring security oauth2 config
logging.level.org.springframework.web=info
logging.level.org.springframework.security=debug
authorization.openid.scope=
authorization.profile.scope=
authorization.metadata.scope=
authorization.required.scopes=
authorization.username.key=
authorization.metadata.key=
authorization.isv.key=
authorization.csp.key=
authorization.granted.roles.scope=urn:zitadel:iam:org:project:roles
authorization.default.role=user
authorization.userid.key=sub