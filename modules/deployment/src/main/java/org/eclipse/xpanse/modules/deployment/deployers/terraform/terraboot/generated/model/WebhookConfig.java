/*
 * Terra-Boot API
 * RESTful Services to interact with terraform CLI
 *
 * The version of the OpenAPI document: 1.0.18-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.eclipse.xpanse.modules.deployment.deployers.terraform.terraboot.generated.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;

/** WebhookConfig */
@JsonPropertyOrder({WebhookConfig.JSON_PROPERTY_URL, WebhookConfig.JSON_PROPERTY_AUTH_TYPE})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.11.0")
public class WebhookConfig {
    public static final String JSON_PROPERTY_URL = "url";
    public static final String JSON_PROPERTY_AUTH_TYPE = "authType";
    @jakarta.annotation.Nonnull private String url;
    @jakarta.annotation.Nonnull private AuthTypeEnum authType;

    public WebhookConfig() {}

    public WebhookConfig url(@jakarta.annotation.Nonnull String url) {

        this.url = url;
        return this;
    }

    /**
     * Callback address after deployment/destroy is completed.
     *
     * @return url
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getUrl() {
        return url;
    }

    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUrl(@jakarta.annotation.Nonnull String url) {
        this.url = url;
    }

    public WebhookConfig authType(@jakarta.annotation.Nonnull AuthTypeEnum authType) {

        this.authType = authType;
        return this;
    }

    /**
     * The permission type when calling back.
     *
     * @return authType
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_AUTH_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public AuthTypeEnum getAuthType() {
        return authType;
    }

    @JsonProperty(JSON_PROPERTY_AUTH_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAuthType(@jakarta.annotation.Nonnull AuthTypeEnum authType) {
        this.authType = authType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WebhookConfig webhookConfig = (WebhookConfig) o;
        return Objects.equals(this.url, webhookConfig.url)
                && Objects.equals(this.authType, webhookConfig.authType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(url, authType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class WebhookConfig {\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /** The permission type when calling back. */
    public enum AuthTypeEnum {
        NONE(String.valueOf("none")),

        OAUTH(String.valueOf("oauth")),

        HMAC(String.valueOf("hmac"));

        private String value;

        AuthTypeEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static AuthTypeEnum fromValue(String value) {
            for (AuthTypeEnum b : AuthTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }
}
