/*
 * Terra-Boot API
 * RESTful Services to interact with terraform CLI
 *
 * The version of the OpenAPI document: 1.0.21-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.eclipse.xpanse.modules.deployment.deployers.terraform.terraboot.generated.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.UUID;

/** ReFetchResult */
@JsonPropertyOrder({
    ReFetchResult.JSON_PROPERTY_REQUEST_ID,
    ReFetchResult.JSON_PROPERTY_STATE,
    ReFetchResult.JSON_PROPERTY_TERRAFORM_RESULT,
    ReFetchResult.JSON_PROPERTY_ERROR_MESSAGE
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.11.0")
public class ReFetchResult {
    public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
    @jakarta.annotation.Nonnull private UUID requestId;

    /** State of the re-fetching result of order. */
    public enum StateEnum {
        OK(String.valueOf("OK")),

        ORDER_IN_PROGRESS(String.valueOf("OrderInProgress")),

        RESULT_NOT_FOUND(String.valueOf("ResultNotFound")),

        RESULT_PARSE_FAILED(String.valueOf("ResultParseFailed"));

        private String value;

        StateEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static StateEnum fromValue(String value) {
            for (StateEnum b : StateEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_STATE = "state";
    @jakarta.annotation.Nonnull private StateEnum state;

    public static final String JSON_PROPERTY_TERRAFORM_RESULT = "terraformResult";
    @jakarta.annotation.Nullable private TerraformResult terraformResult;

    public static final String JSON_PROPERTY_ERROR_MESSAGE = "errorMessage";
    @jakarta.annotation.Nullable private String errorMessage;

    public ReFetchResult() {}

    public ReFetchResult requestId(@jakarta.annotation.Nonnull UUID requestId) {

        this.requestId = requestId;
        return this;
    }

    /**
     * Id of the request order.
     *
     * @return requestId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_REQUEST_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getRequestId() {
        return requestId;
    }

    @JsonProperty(JSON_PROPERTY_REQUEST_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRequestId(@jakarta.annotation.Nonnull UUID requestId) {
        this.requestId = requestId;
    }

    public ReFetchResult state(@jakarta.annotation.Nonnull StateEnum state) {

        this.state = state;
        return this;
    }

    /**
     * State of the re-fetching result of order.
     *
     * @return state
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_STATE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public StateEnum getState() {
        return state;
    }

    @JsonProperty(JSON_PROPERTY_STATE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setState(@jakarta.annotation.Nonnull StateEnum state) {
        this.state = state;
    }

    public ReFetchResult terraformResult(
            @jakarta.annotation.Nullable TerraformResult terraformResult) {

        this.terraformResult = terraformResult;
        return this;
    }

    /**
     * Result of the service order executed by terraform.
     *
     * @return terraformResult
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TERRAFORM_RESULT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TerraformResult getTerraformResult() {
        return terraformResult;
    }

    @JsonProperty(JSON_PROPERTY_TERRAFORM_RESULT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTerraformResult(@jakarta.annotation.Nullable TerraformResult terraformResult) {
        this.terraformResult = terraformResult;
    }

    public ReFetchResult errorMessage(@jakarta.annotation.Nullable String errorMessage) {

        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Error message of the re-fetching result of order.
     *
     * @return errorMessage
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getErrorMessage() {
        return errorMessage;
    }

    @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setErrorMessage(@jakarta.annotation.Nullable String errorMessage) {
        this.errorMessage = errorMessage;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReFetchResult reFetchResult = (ReFetchResult) o;
        return Objects.equals(this.requestId, reFetchResult.requestId)
                && Objects.equals(this.state, reFetchResult.state)
                && Objects.equals(this.terraformResult, reFetchResult.terraformResult)
                && Objects.equals(this.errorMessage, reFetchResult.errorMessage);
    }

    @Override
    public int hashCode() {
        return Objects.hash(requestId, state, terraformResult, errorMessage);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ReFetchResult {\n");
        sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("    terraformResult: ").append(toIndentedString(terraformResult)).append("\n");
        sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
