/*
 * Terra-Boot API
 * RESTful Services to interact with terraform CLI
 *
 * The version of the OpenAPI document: 1.0.22-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.eclipse.xpanse.modules.deployment.deployers.terraform.terraboot.generated.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.UUID;

/** Terraform async request with scripts git repo */
@JsonPropertyOrder({
    TerraformRequestWithScriptsGitRepo.JSON_PROPERTY_REQUEST_ID,
    TerraformRequestWithScriptsGitRepo.JSON_PROPERTY_REQUEST_TYPE,
    TerraformRequestWithScriptsGitRepo.JSON_PROPERTY_TERRAFORM_VERSION,
    TerraformRequestWithScriptsGitRepo.JSON_PROPERTY_IS_PLAN_ONLY,
    TerraformRequestWithScriptsGitRepo.JSON_PROPERTY_VARIABLES,
    TerraformRequestWithScriptsGitRepo.JSON_PROPERTY_ENV_VARIABLES,
    TerraformRequestWithScriptsGitRepo.JSON_PROPERTY_TF_STATE,
    TerraformRequestWithScriptsGitRepo.JSON_PROPERTY_GIT_REPO_DETAILS
})
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.11.0")
public class TerraformRequestWithScriptsGitRepo {
    public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
    @jakarta.annotation.Nonnull private UUID requestId;

    /** Type of the terraform request. */
    public enum RequestTypeEnum {
        VALIDATE(String.valueOf("validate")),

        PLAN(String.valueOf("plan")),

        DEPLOY(String.valueOf("deploy")),

        MODIFY(String.valueOf("modify")),

        DESTROY(String.valueOf("destroy"));

        private String value;

        RequestTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static RequestTypeEnum fromValue(String value) {
            for (RequestTypeEnum b : RequestTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_REQUEST_TYPE = "requestType";
    @jakarta.annotation.Nonnull private RequestTypeEnum requestType;

    public static final String JSON_PROPERTY_TERRAFORM_VERSION = "terraformVersion";
    @jakarta.annotation.Nonnull private String terraformVersion;

    public static final String JSON_PROPERTY_IS_PLAN_ONLY = "isPlanOnly";
    @jakarta.annotation.Nonnull private Boolean isPlanOnly;

    public static final String JSON_PROPERTY_VARIABLES = "variables";
    @jakarta.annotation.Nonnull private Map<String, Object> variables = new HashMap<>();

    public static final String JSON_PROPERTY_ENV_VARIABLES = "envVariables";
    @jakarta.annotation.Nullable private Map<String, String> envVariables = new HashMap<>();

    public static final String JSON_PROPERTY_TF_STATE = "tfState";
    @jakarta.annotation.Nullable private String tfState;

    public static final String JSON_PROPERTY_GIT_REPO_DETAILS = "gitRepoDetails";
    @jakarta.annotation.Nonnull private TerraformScriptsGitRepoDetails gitRepoDetails;

    public TerraformRequestWithScriptsGitRepo() {}

    public TerraformRequestWithScriptsGitRepo requestId(
            @jakarta.annotation.Nonnull UUID requestId) {

        this.requestId = requestId;
        return this;
    }

    /**
     * Id of the request.
     *
     * @return requestId
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_REQUEST_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public UUID getRequestId() {
        return requestId;
    }

    @JsonProperty(JSON_PROPERTY_REQUEST_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRequestId(@jakarta.annotation.Nonnull UUID requestId) {
        this.requestId = requestId;
    }

    public TerraformRequestWithScriptsGitRepo requestType(
            @jakarta.annotation.Nonnull RequestTypeEnum requestType) {

        this.requestType = requestType;
        return this;
    }

    /**
     * Type of the terraform request.
     *
     * @return requestType
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_REQUEST_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public RequestTypeEnum getRequestType() {
        return requestType;
    }

    @JsonProperty(JSON_PROPERTY_REQUEST_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRequestType(@jakarta.annotation.Nonnull RequestTypeEnum requestType) {
        this.requestType = requestType;
    }

    public TerraformRequestWithScriptsGitRepo terraformVersion(
            @jakarta.annotation.Nonnull String terraformVersion) {

        this.terraformVersion = terraformVersion;
        return this;
    }

    /**
     * The required version of terraform which will execute the scripts.
     *
     * @return terraformVersion
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TERRAFORM_VERSION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getTerraformVersion() {
        return terraformVersion;
    }

    @JsonProperty(JSON_PROPERTY_TERRAFORM_VERSION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTerraformVersion(@jakarta.annotation.Nonnull String terraformVersion) {
        this.terraformVersion = terraformVersion;
    }

    public TerraformRequestWithScriptsGitRepo isPlanOnly(
            @jakarta.annotation.Nonnull Boolean isPlanOnly) {

        this.isPlanOnly = isPlanOnly;
        return this;
    }

    /**
     * Flag to control if the deployment must only generate the terraform or it must also apply the
     * changes.
     *
     * @return isPlanOnly
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_IS_PLAN_ONLY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getIsPlanOnly() {
        return isPlanOnly;
    }

    @JsonProperty(JSON_PROPERTY_IS_PLAN_ONLY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setIsPlanOnly(@jakarta.annotation.Nonnull Boolean isPlanOnly) {
        this.isPlanOnly = isPlanOnly;
    }

    public TerraformRequestWithScriptsGitRepo variables(
            @jakarta.annotation.Nonnull Map<String, Object> variables) {

        this.variables = variables;
        return this;
    }

    public TerraformRequestWithScriptsGitRepo putVariablesItem(String key, Object variablesItem) {
        this.variables.put(key, variablesItem);
        return this;
    }

    /**
     * Key-value pairs of variables that must be used to execute the Terraform request.
     *
     * @return variables
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_VARIABLES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Map<String, Object> getVariables() {
        return variables;
    }

    @JsonProperty(JSON_PROPERTY_VARIABLES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setVariables(@jakarta.annotation.Nonnull Map<String, Object> variables) {
        this.variables = variables;
    }

    public TerraformRequestWithScriptsGitRepo envVariables(
            @jakarta.annotation.Nullable Map<String, String> envVariables) {

        this.envVariables = envVariables;
        return this;
    }

    public TerraformRequestWithScriptsGitRepo putEnvVariablesItem(
            String key, String envVariablesItem) {
        if (this.envVariables == null) {
            this.envVariables = new HashMap<>();
        }
        this.envVariables.put(key, envVariablesItem);
        return this;
    }

    /**
     * Key-value pairs of variables that must be injected as environment variables to terraform
     * process.
     *
     * @return envVariables
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ENV_VARIABLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Map<String, String> getEnvVariables() {
        return envVariables;
    }

    @JsonProperty(JSON_PROPERTY_ENV_VARIABLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEnvVariables(@jakarta.annotation.Nullable Map<String, String> envVariables) {
        this.envVariables = envVariables;
    }

    public TerraformRequestWithScriptsGitRepo tfState(@jakarta.annotation.Nullable String tfState) {

        this.tfState = tfState;
        return this;
    }

    /**
     * Terraform state as a string.
     *
     * @return tfState
     */
    @jakarta.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TF_STATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTfState() {
        return tfState;
    }

    @JsonProperty(JSON_PROPERTY_TF_STATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTfState(@jakarta.annotation.Nullable String tfState) {
        this.tfState = tfState;
    }

    public TerraformRequestWithScriptsGitRepo gitRepoDetails(
            @jakarta.annotation.Nonnull TerraformScriptsGitRepoDetails gitRepoDetails) {

        this.gitRepoDetails = gitRepoDetails;
        return this;
    }

    /**
     * GIT Repo details from where the scripts can be fetched.
     *
     * @return gitRepoDetails
     */
    @jakarta.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_GIT_REPO_DETAILS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TerraformScriptsGitRepoDetails getGitRepoDetails() {
        return gitRepoDetails;
    }

    @JsonProperty(JSON_PROPERTY_GIT_REPO_DETAILS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setGitRepoDetails(
            @jakarta.annotation.Nonnull TerraformScriptsGitRepoDetails gitRepoDetails) {
        this.gitRepoDetails = gitRepoDetails;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TerraformRequestWithScriptsGitRepo terraformRequestWithScriptsGitRepo =
                (TerraformRequestWithScriptsGitRepo) o;
        return Objects.equals(this.requestId, terraformRequestWithScriptsGitRepo.requestId)
                && Objects.equals(this.requestType, terraformRequestWithScriptsGitRepo.requestType)
                && Objects.equals(
                        this.terraformVersion, terraformRequestWithScriptsGitRepo.terraformVersion)
                && Objects.equals(this.isPlanOnly, terraformRequestWithScriptsGitRepo.isPlanOnly)
                && Objects.equals(this.variables, terraformRequestWithScriptsGitRepo.variables)
                && Objects.equals(
                        this.envVariables, terraformRequestWithScriptsGitRepo.envVariables)
                && Objects.equals(this.tfState, terraformRequestWithScriptsGitRepo.tfState)
                && Objects.equals(
                        this.gitRepoDetails, terraformRequestWithScriptsGitRepo.gitRepoDetails);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                requestId,
                requestType,
                terraformVersion,
                isPlanOnly,
                variables,
                envVariables,
                tfState,
                gitRepoDetails);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TerraformRequestWithScriptsGitRepo {\n");
        sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
        sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
        sb.append("    terraformVersion: ").append(toIndentedString(terraformVersion)).append("\n");
        sb.append("    isPlanOnly: ").append(toIndentedString(isPlanOnly)).append("\n");
        sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
        sb.append("    envVariables: ").append(toIndentedString(envVariables)).append("\n");
        sb.append("    tfState: ").append(toIndentedString(tfState)).append("\n");
        sb.append("    gitRepoDetails: ").append(toIndentedString(gitRepoDetails)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
